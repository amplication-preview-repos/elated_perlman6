/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TransactionsPortugueseCoins as PrismaTransactionsPortugueseCoins,
  User as PrismaUser,
} from "@prisma/client";

export class TransactionsPortugueseCoinsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransactionsPortugueseCoinsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transactionsPortugueseCoins.count(args);
  }

  async transactionsPortugueseCoinsItems(
    args: Prisma.TransactionsPortugueseCoinsFindManyArgs
  ): Promise<PrismaTransactionsPortugueseCoins[]> {
    return this.prisma.transactionsPortugueseCoins.findMany(args);
  }
  async transactionsPortugueseCoins(
    args: Prisma.TransactionsPortugueseCoinsFindUniqueArgs
  ): Promise<PrismaTransactionsPortugueseCoins | null> {
    return this.prisma.transactionsPortugueseCoins.findUnique(args);
  }
  async createTransactionsPortugueseCoins(
    args: Prisma.TransactionsPortugueseCoinsCreateArgs
  ): Promise<PrismaTransactionsPortugueseCoins> {
    return this.prisma.transactionsPortugueseCoins.create(args);
  }
  async updateTransactionsPortugueseCoins(
    args: Prisma.TransactionsPortugueseCoinsUpdateArgs
  ): Promise<PrismaTransactionsPortugueseCoins> {
    return this.prisma.transactionsPortugueseCoins.update(args);
  }
  async deleteTransactionsPortugueseCoins(
    args: Prisma.TransactionsPortugueseCoinsDeleteArgs
  ): Promise<PrismaTransactionsPortugueseCoins> {
    return this.prisma.transactionsPortugueseCoins.delete(args);
  }

  async findReceivedUser(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.transactionsPortugueseCoins
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ReceivedUser(args);
  }
}
