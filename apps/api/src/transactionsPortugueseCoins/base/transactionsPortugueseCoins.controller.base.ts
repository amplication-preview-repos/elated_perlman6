/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TransactionsPortugueseCoinsService } from "../transactionsPortugueseCoins.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TransactionsPortugueseCoinsCreateInput } from "./TransactionsPortugueseCoinsCreateInput";
import { TransactionsPortugueseCoins } from "./TransactionsPortugueseCoins";
import { TransactionsPortugueseCoinsFindManyArgs } from "./TransactionsPortugueseCoinsFindManyArgs";
import { TransactionsPortugueseCoinsWhereUniqueInput } from "./TransactionsPortugueseCoinsWhereUniqueInput";
import { TransactionsPortugueseCoinsUpdateInput } from "./TransactionsPortugueseCoinsUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TransactionsPortugueseCoinsControllerBase {
  constructor(
    protected readonly service: TransactionsPortugueseCoinsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransactionsPortugueseCoins })
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TransactionsPortugueseCoinsCreateInput,
  })
  async createTransactionsPortugueseCoins(
    @common.Body() data: TransactionsPortugueseCoinsCreateInput
  ): Promise<TransactionsPortugueseCoins> {
    return await this.service.createTransactionsPortugueseCoins({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        timestamp: true,
        description: true,
        transactionType: true,
        SenderId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TransactionsPortugueseCoins] })
  @ApiNestedQuery(TransactionsPortugueseCoinsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async transactionsPortugueseCoinsItems(
    @common.Req() request: Request
  ): Promise<TransactionsPortugueseCoins[]> {
    const args = plainToClass(
      TransactionsPortugueseCoinsFindManyArgs,
      request.query
    );
    return this.service.transactionsPortugueseCoinsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        timestamp: true,
        description: true,
        transactionType: true,
        SenderId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransactionsPortugueseCoins })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async transactionsPortugueseCoins(
    @common.Param() params: TransactionsPortugueseCoinsWhereUniqueInput
  ): Promise<TransactionsPortugueseCoins | null> {
    const result = await this.service.transactionsPortugueseCoins({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        timestamp: true,
        description: true,
        transactionType: true,
        SenderId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransactionsPortugueseCoins })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TransactionsPortugueseCoinsUpdateInput,
  })
  async updateTransactionsPortugueseCoins(
    @common.Param() params: TransactionsPortugueseCoinsWhereUniqueInput,
    @common.Body() data: TransactionsPortugueseCoinsUpdateInput
  ): Promise<TransactionsPortugueseCoins | null> {
    try {
      return await this.service.updateTransactionsPortugueseCoins({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          timestamp: true,
          description: true,
          transactionType: true,
          SenderId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransactionsPortugueseCoins })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTransactionsPortugueseCoins(
    @common.Param() params: TransactionsPortugueseCoinsWhereUniqueInput
  ): Promise<TransactionsPortugueseCoins | null> {
    try {
      return await this.service.deleteTransactionsPortugueseCoins({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          timestamp: true,
          description: true,
          transactionType: true,
          SenderId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ReceivedUser")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findReceivedUser(
    @common.Req() request: Request,
    @common.Param() params: TransactionsPortugueseCoinsWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findReceivedUser(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ReceivedUser")
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "update",
    possession: "any",
  })
  async connectReceivedUser(
    @common.Param() params: TransactionsPortugueseCoinsWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ReceivedUser: {
        connect: body,
      },
    };
    await this.service.updateTransactionsPortugueseCoins({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ReceivedUser")
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "update",
    possession: "any",
  })
  async updateReceivedUser(
    @common.Param() params: TransactionsPortugueseCoinsWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ReceivedUser: {
        set: body,
      },
    };
    await this.service.updateTransactionsPortugueseCoins({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ReceivedUser")
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "update",
    possession: "any",
  })
  async disconnectReceivedUser(
    @common.Param() params: TransactionsPortugueseCoinsWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ReceivedUser: {
        disconnect: body,
      },
    };
    await this.service.updateTransactionsPortugueseCoins({
      where: params,
      data,
      select: { id: true },
    });
  }
}
