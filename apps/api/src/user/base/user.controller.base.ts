/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { UserRankingFindManyArgs } from "../../userRanking/base/UserRankingFindManyArgs";
import { UserRanking } from "../../userRanking/base/UserRanking";
import { UserRankingWhereUniqueInput } from "../../userRanking/base/UserRankingWhereUniqueInput";
import { UserOnboardingFindManyArgs } from "../../userOnboarding/base/UserOnboardingFindManyArgs";
import { UserOnboarding } from "../../userOnboarding/base/UserOnboarding";
import { UserOnboardingWhereUniqueInput } from "../../userOnboarding/base/UserOnboardingWhereUniqueInput";
import { GuildsMembersFindManyArgs } from "../../guildsMembers/base/GuildsMembersFindManyArgs";
import { GuildsMembers } from "../../guildsMembers/base/GuildsMembers";
import { GuildsMembersWhereUniqueInput } from "../../guildsMembers/base/GuildsMembersWhereUniqueInput";
import { AnnouncementFindManyArgs } from "../../announcement/base/AnnouncementFindManyArgs";
import { Announcement } from "../../announcement/base/Announcement";
import { AnnouncementWhereUniqueInput } from "../../announcement/base/AnnouncementWhereUniqueInput";
import { TransactionsPortugueseCoinsFindManyArgs } from "../../transactionsPortugueseCoins/base/TransactionsPortugueseCoinsFindManyArgs";
import { TransactionsPortugueseCoins } from "../../transactionsPortugueseCoins/base/TransactionsPortugueseCoins";
import { TransactionsPortugueseCoinsWhereUniqueInput } from "../../transactionsPortugueseCoins/base/TransactionsPortugueseCoinsWhereUniqueInput";
import { TransactionsHonorGloryFindManyArgs } from "../../transactionsHonorGlory/base/TransactionsHonorGloryFindManyArgs";
import { TransactionsHonorGlory } from "../../transactionsHonorGlory/base/TransactionsHonorGlory";
import { TransactionsHonorGloryWhereUniqueInput } from "../../transactionsHonorGlory/base/TransactionsHonorGloryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: UserCreateInput,
  })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: UserUpdateInput,
  })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userRankings")
  @ApiNestedQuery(UserRankingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserRanking",
    action: "read",
    possession: "any",
  })
  async findUserRankings(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserRanking[]> {
    const query = plainToClass(UserRankingFindManyArgs, request.query);
    const results = await this.service.findUserRankings(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        score: true,
        date: true,
        rank: true,

        user_id: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRankings")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserRankings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRankingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRankings: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRankings")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserRankings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRankingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRankings: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRankings")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserRankings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRankingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRankings: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userOnboardings")
  @ApiNestedQuery(UserOnboardingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserOnboarding",
    action: "read",
    possession: "any",
  })
  async findUserOnboardings(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserOnboarding[]> {
    const query = plainToClass(UserOnboardingFindManyArgs, request.query);
    const results = await this.service.findUserOnboardings(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        step: true,
        completed: true,
        date: true,

        user_id: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userOnboardings")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserOnboardings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserOnboardingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOnboardings: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userOnboardings")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserOnboardings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserOnboardingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOnboardings: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userOnboardings")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserOnboardings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserOnboardingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userOnboardings: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/guildsMembersItems")
  @ApiNestedQuery(GuildsMembersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "read",
    possession: "any",
  })
  async findGuildsMembersItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<GuildsMembers[]> {
    const query = plainToClass(GuildsMembersFindManyArgs, request.query);
    const results = await this.service.findGuildsMembersItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        joinedAt: true,
        role: true,

        guild: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/guildsMembersItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectGuildsMembersItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GuildsMembersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsMembersItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/guildsMembersItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateGuildsMembersItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GuildsMembersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsMembersItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/guildsMembersItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectGuildsMembersItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GuildsMembersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsMembersItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/announcements")
  @ApiNestedQuery(AnnouncementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Announcement",
    action: "read",
    possession: "any",
  })
  async findAnnouncements(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Announcement[]> {
    const query = plainToClass(AnnouncementFindManyArgs, request.query);
    const results = await this.service.findAnnouncements(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        publishDate: true,
        isActive: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/announcements")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectAnnouncements(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AnnouncementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      announcements: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/announcements")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateAnnouncements(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AnnouncementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      announcements: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/announcements")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectAnnouncements(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AnnouncementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      announcements: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactionsPortugueseCoinsItems")
  @ApiNestedQuery(TransactionsPortugueseCoinsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TransactionsPortugueseCoins",
    action: "read",
    possession: "any",
  })
  async findTransactionsPortugueseCoinsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TransactionsPortugueseCoins[]> {
    const query = plainToClass(
      TransactionsPortugueseCoinsFindManyArgs,
      request.query
    );
    const results = await this.service.findTransactionsPortugueseCoinsItems(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          timestamp: true,
          description: true,
          transactionType: true,
          SenderId: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactionsPortugueseCoinsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectTransactionsPortugueseCoinsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TransactionsPortugueseCoinsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsPortugueseCoinsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactionsPortugueseCoinsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateTransactionsPortugueseCoinsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TransactionsPortugueseCoinsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsPortugueseCoinsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactionsPortugueseCoinsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectTransactionsPortugueseCoinsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TransactionsPortugueseCoinsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsPortugueseCoinsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactionsHonorGlories")
  @ApiNestedQuery(TransactionsHonorGloryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TransactionsHonorGlory",
    action: "read",
    possession: "any",
  })
  async findTransactionsHonorGlories(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TransactionsHonorGlory[]> {
    const query = plainToClass(
      TransactionsHonorGloryFindManyArgs,
      request.query
    );
    const results = await this.service.findTransactionsHonorGlories(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        transactionType: true,
        amount: true,
        description: true,
        timestamp: true,
        receiveruser: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactionsHonorGlories")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectTransactionsHonorGlories(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TransactionsHonorGloryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsHonorGlories: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactionsHonorGlories")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateTransactionsHonorGlories(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TransactionsHonorGloryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsHonorGlories: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactionsHonorGlories")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectTransactionsHonorGlories(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TransactionsHonorGloryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsHonorGlories: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
