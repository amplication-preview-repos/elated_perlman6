/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GuildsCoins } from "./GuildsCoins";
import { GuildsCoinsCountArgs } from "./GuildsCoinsCountArgs";
import { GuildsCoinsFindManyArgs } from "./GuildsCoinsFindManyArgs";
import { GuildsCoinsFindUniqueArgs } from "./GuildsCoinsFindUniqueArgs";
import { CreateGuildsCoinsArgs } from "./CreateGuildsCoinsArgs";
import { UpdateGuildsCoinsArgs } from "./UpdateGuildsCoinsArgs";
import { DeleteGuildsCoinsArgs } from "./DeleteGuildsCoinsArgs";
import { Guild } from "../../guild/base/Guild";
import { GuildsCoinsService } from "../guildsCoins.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GuildsCoins)
export class GuildsCoinsResolverBase {
  constructor(
    protected readonly service: GuildsCoinsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "read",
    possession: "any",
  })
  async _guildsCoinsItemsMeta(
    @graphql.Args() args: GuildsCoinsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GuildsCoins])
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "read",
    possession: "any",
  })
  async guildsCoinsItems(
    @graphql.Args() args: GuildsCoinsFindManyArgs
  ): Promise<GuildsCoins[]> {
    return this.service.guildsCoinsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GuildsCoins, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "read",
    possession: "own",
  })
  async guildsCoins(
    @graphql.Args() args: GuildsCoinsFindUniqueArgs
  ): Promise<GuildsCoins | null> {
    const result = await this.service.guildsCoins(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsCoins)
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "create",
    possession: "any",
  })
  async createGuildsCoins(
    @graphql.Args() args: CreateGuildsCoinsArgs
  ): Promise<GuildsCoins> {
    return await this.service.createGuildsCoins({
      ...args,
      data: {
        ...args.data,

        guild: args.data.guild
          ? {
              connect: args.data.guild,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsCoins)
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "update",
    possession: "any",
  })
  async updateGuildsCoins(
    @graphql.Args() args: UpdateGuildsCoinsArgs
  ): Promise<GuildsCoins | null> {
    try {
      return await this.service.updateGuildsCoins({
        ...args,
        data: {
          ...args.data,

          guild: args.data.guild
            ? {
                connect: args.data.guild,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuildsCoins)
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "delete",
    possession: "any",
  })
  async deleteGuildsCoins(
    @graphql.Args() args: DeleteGuildsCoinsArgs
  ): Promise<GuildsCoins | null> {
    try {
      return await this.service.deleteGuildsCoins(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Guild, {
    nullable: true,
    name: "guild",
  })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  async getGuild(@graphql.Parent() parent: GuildsCoins): Promise<Guild | null> {
    const result = await this.service.getGuild(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
