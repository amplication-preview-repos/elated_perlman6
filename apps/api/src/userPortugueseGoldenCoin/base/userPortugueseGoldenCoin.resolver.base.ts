/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserPortugueseGoldenCoin } from "./UserPortugueseGoldenCoin";
import { UserPortugueseGoldenCoinCountArgs } from "./UserPortugueseGoldenCoinCountArgs";
import { UserPortugueseGoldenCoinFindManyArgs } from "./UserPortugueseGoldenCoinFindManyArgs";
import { UserPortugueseGoldenCoinFindUniqueArgs } from "./UserPortugueseGoldenCoinFindUniqueArgs";
import { CreateUserPortugueseGoldenCoinArgs } from "./CreateUserPortugueseGoldenCoinArgs";
import { UpdateUserPortugueseGoldenCoinArgs } from "./UpdateUserPortugueseGoldenCoinArgs";
import { DeleteUserPortugueseGoldenCoinArgs } from "./DeleteUserPortugueseGoldenCoinArgs";
import { UserPortugueseGoldenCoinService } from "../userPortugueseGoldenCoin.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserPortugueseGoldenCoin)
export class UserPortugueseGoldenCoinResolverBase {
  constructor(
    protected readonly service: UserPortugueseGoldenCoinService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserPortugueseGoldenCoin",
    action: "read",
    possession: "any",
  })
  async _userPortugueseGoldenCoinsMeta(
    @graphql.Args() args: UserPortugueseGoldenCoinCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserPortugueseGoldenCoin])
  @nestAccessControl.UseRoles({
    resource: "UserPortugueseGoldenCoin",
    action: "read",
    possession: "any",
  })
  async userPortugueseGoldenCoins(
    @graphql.Args() args: UserPortugueseGoldenCoinFindManyArgs
  ): Promise<UserPortugueseGoldenCoin[]> {
    return this.service.userPortugueseGoldenCoins(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserPortugueseGoldenCoin, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserPortugueseGoldenCoin",
    action: "read",
    possession: "own",
  })
  async userPortugueseGoldenCoin(
    @graphql.Args() args: UserPortugueseGoldenCoinFindUniqueArgs
  ): Promise<UserPortugueseGoldenCoin | null> {
    const result = await this.service.userPortugueseGoldenCoin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPortugueseGoldenCoin)
  @nestAccessControl.UseRoles({
    resource: "UserPortugueseGoldenCoin",
    action: "create",
    possession: "any",
  })
  async createUserPortugueseGoldenCoin(
    @graphql.Args() args: CreateUserPortugueseGoldenCoinArgs
  ): Promise<UserPortugueseGoldenCoin> {
    return await this.service.createUserPortugueseGoldenCoin({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPortugueseGoldenCoin)
  @nestAccessControl.UseRoles({
    resource: "UserPortugueseGoldenCoin",
    action: "update",
    possession: "any",
  })
  async updateUserPortugueseGoldenCoin(
    @graphql.Args() args: UpdateUserPortugueseGoldenCoinArgs
  ): Promise<UserPortugueseGoldenCoin | null> {
    try {
      return await this.service.updateUserPortugueseGoldenCoin({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPortugueseGoldenCoin)
  @nestAccessControl.UseRoles({
    resource: "UserPortugueseGoldenCoin",
    action: "delete",
    possession: "any",
  })
  async deleteUserPortugueseGoldenCoin(
    @graphql.Args() args: DeleteUserPortugueseGoldenCoinArgs
  ): Promise<UserPortugueseGoldenCoin | null> {
    try {
      return await this.service.deleteUserPortugueseGoldenCoin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
