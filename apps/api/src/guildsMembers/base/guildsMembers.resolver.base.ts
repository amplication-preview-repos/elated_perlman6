/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GuildsMembers } from "./GuildsMembers";
import { GuildsMembersCountArgs } from "./GuildsMembersCountArgs";
import { GuildsMembersFindManyArgs } from "./GuildsMembersFindManyArgs";
import { GuildsMembersFindUniqueArgs } from "./GuildsMembersFindUniqueArgs";
import { CreateGuildsMembersArgs } from "./CreateGuildsMembersArgs";
import { UpdateGuildsMembersArgs } from "./UpdateGuildsMembersArgs";
import { DeleteGuildsMembersArgs } from "./DeleteGuildsMembersArgs";
import { Guild } from "../../guild/base/Guild";
import { User } from "../../user/base/User";
import { GuildsMembersService } from "../guildsMembers.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GuildsMembers)
export class GuildsMembersResolverBase {
  constructor(
    protected readonly service: GuildsMembersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "read",
    possession: "any",
  })
  async _guildsMembersItemsMeta(
    @graphql.Args() args: GuildsMembersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GuildsMembers])
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "read",
    possession: "any",
  })
  async guildsMembersItems(
    @graphql.Args() args: GuildsMembersFindManyArgs
  ): Promise<GuildsMembers[]> {
    return this.service.guildsMembersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GuildsMembers, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "read",
    possession: "own",
  })
  async guildsMembers(
    @graphql.Args() args: GuildsMembersFindUniqueArgs
  ): Promise<GuildsMembers | null> {
    const result = await this.service.guildsMembers(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsMembers)
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "create",
    possession: "any",
  })
  async createGuildsMembers(
    @graphql.Args() args: CreateGuildsMembersArgs
  ): Promise<GuildsMembers> {
    return await this.service.createGuildsMembers({
      ...args,
      data: {
        ...args.data,

        guild: args.data.guild
          ? {
              connect: args.data.guild,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsMembers)
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "update",
    possession: "any",
  })
  async updateGuildsMembers(
    @graphql.Args() args: UpdateGuildsMembersArgs
  ): Promise<GuildsMembers | null> {
    try {
      return await this.service.updateGuildsMembers({
        ...args,
        data: {
          ...args.data,

          guild: args.data.guild
            ? {
                connect: args.data.guild,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuildsMembers)
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "delete",
    possession: "any",
  })
  async deleteGuildsMembers(
    @graphql.Args() args: DeleteGuildsMembersArgs
  ): Promise<GuildsMembers | null> {
    try {
      return await this.service.deleteGuildsMembers(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Guild, {
    nullable: true,
    name: "guild",
  })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  async getGuild(
    @graphql.Parent() parent: GuildsMembers
  ): Promise<Guild | null> {
    const result = await this.service.getGuild(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: GuildsMembers): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
