/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserInvitations } from "./UserInvitations";
import { UserInvitationsCountArgs } from "./UserInvitationsCountArgs";
import { UserInvitationsFindManyArgs } from "./UserInvitationsFindManyArgs";
import { UserInvitationsFindUniqueArgs } from "./UserInvitationsFindUniqueArgs";
import { CreateUserInvitationsArgs } from "./CreateUserInvitationsArgs";
import { UpdateUserInvitationsArgs } from "./UpdateUserInvitationsArgs";
import { DeleteUserInvitationsArgs } from "./DeleteUserInvitationsArgs";
import { UserInvitationsService } from "../userInvitations.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserInvitations)
export class UserInvitationsResolverBase {
  constructor(
    protected readonly service: UserInvitationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserInvitations",
    action: "read",
    possession: "any",
  })
  async _userInvitationsItemsMeta(
    @graphql.Args() args: UserInvitationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserInvitations])
  @nestAccessControl.UseRoles({
    resource: "UserInvitations",
    action: "read",
    possession: "any",
  })
  async userInvitationsItems(
    @graphql.Args() args: UserInvitationsFindManyArgs
  ): Promise<UserInvitations[]> {
    return this.service.userInvitationsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserInvitations, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserInvitations",
    action: "read",
    possession: "own",
  })
  async userInvitations(
    @graphql.Args() args: UserInvitationsFindUniqueArgs
  ): Promise<UserInvitations | null> {
    const result = await this.service.userInvitations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserInvitations)
  @nestAccessControl.UseRoles({
    resource: "UserInvitations",
    action: "create",
    possession: "any",
  })
  async createUserInvitations(
    @graphql.Args() args: CreateUserInvitationsArgs
  ): Promise<UserInvitations> {
    return await this.service.createUserInvitations({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserInvitations)
  @nestAccessControl.UseRoles({
    resource: "UserInvitations",
    action: "update",
    possession: "any",
  })
  async updateUserInvitations(
    @graphql.Args() args: UpdateUserInvitationsArgs
  ): Promise<UserInvitations | null> {
    try {
      return await this.service.updateUserInvitations({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserInvitations)
  @nestAccessControl.UseRoles({
    resource: "UserInvitations",
    action: "delete",
    possession: "any",
  })
  async deleteUserInvitations(
    @graphql.Args() args: DeleteUserInvitationsArgs
  ): Promise<UserInvitations | null> {
    try {
      return await this.service.deleteUserInvitations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
