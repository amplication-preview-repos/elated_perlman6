/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserPrivateInfo } from "./UserPrivateInfo";
import { UserPrivateInfoCountArgs } from "./UserPrivateInfoCountArgs";
import { UserPrivateInfoFindManyArgs } from "./UserPrivateInfoFindManyArgs";
import { UserPrivateInfoFindUniqueArgs } from "./UserPrivateInfoFindUniqueArgs";
import { CreateUserPrivateInfoArgs } from "./CreateUserPrivateInfoArgs";
import { UpdateUserPrivateInfoArgs } from "./UpdateUserPrivateInfoArgs";
import { DeleteUserPrivateInfoArgs } from "./DeleteUserPrivateInfoArgs";
import { UserPrivateInfoService } from "../userPrivateInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserPrivateInfo)
export class UserPrivateInfoResolverBase {
  constructor(
    protected readonly service: UserPrivateInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserPrivateInfo",
    action: "read",
    possession: "any",
  })
  async _userPrivateInfosMeta(
    @graphql.Args() args: UserPrivateInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserPrivateInfo])
  @nestAccessControl.UseRoles({
    resource: "UserPrivateInfo",
    action: "read",
    possession: "any",
  })
  async userPrivateInfos(
    @graphql.Args() args: UserPrivateInfoFindManyArgs
  ): Promise<UserPrivateInfo[]> {
    return this.service.userPrivateInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserPrivateInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserPrivateInfo",
    action: "read",
    possession: "own",
  })
  async userPrivateInfo(
    @graphql.Args() args: UserPrivateInfoFindUniqueArgs
  ): Promise<UserPrivateInfo | null> {
    const result = await this.service.userPrivateInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPrivateInfo)
  @nestAccessControl.UseRoles({
    resource: "UserPrivateInfo",
    action: "create",
    possession: "any",
  })
  async createUserPrivateInfo(
    @graphql.Args() args: CreateUserPrivateInfoArgs
  ): Promise<UserPrivateInfo> {
    return await this.service.createUserPrivateInfo({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPrivateInfo)
  @nestAccessControl.UseRoles({
    resource: "UserPrivateInfo",
    action: "update",
    possession: "any",
  })
  async updateUserPrivateInfo(
    @graphql.Args() args: UpdateUserPrivateInfoArgs
  ): Promise<UserPrivateInfo | null> {
    try {
      return await this.service.updateUserPrivateInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPrivateInfo)
  @nestAccessControl.UseRoles({
    resource: "UserPrivateInfo",
    action: "delete",
    possession: "any",
  })
  async deleteUserPrivateInfo(
    @graphql.Args() args: DeleteUserPrivateInfoArgs
  ): Promise<UserPrivateInfo | null> {
    try {
      return await this.service.deleteUserPrivateInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
