/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserPrivateInfo as PrismaUserPrivateInfo,
} from "@prisma/client";

export class UserPrivateInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserPrivateInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userPrivateInfo.count(args);
  }

  async userPrivateInfos(
    args: Prisma.UserPrivateInfoFindManyArgs
  ): Promise<PrismaUserPrivateInfo[]> {
    return this.prisma.userPrivateInfo.findMany(args);
  }
  async userPrivateInfo(
    args: Prisma.UserPrivateInfoFindUniqueArgs
  ): Promise<PrismaUserPrivateInfo | null> {
    return this.prisma.userPrivateInfo.findUnique(args);
  }
  async createUserPrivateInfo(
    args: Prisma.UserPrivateInfoCreateArgs
  ): Promise<PrismaUserPrivateInfo> {
    return this.prisma.userPrivateInfo.create(args);
  }
  async updateUserPrivateInfo(
    args: Prisma.UserPrivateInfoUpdateArgs
  ): Promise<PrismaUserPrivateInfo> {
    return this.prisma.userPrivateInfo.update(args);
  }
  async deleteUserPrivateInfo(
    args: Prisma.UserPrivateInfoDeleteArgs
  ): Promise<PrismaUserPrivateInfo> {
    return this.prisma.userPrivateInfo.delete(args);
  }
}
