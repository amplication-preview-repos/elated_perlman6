/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Missions } from "./Missions";
import { MissionsCountArgs } from "./MissionsCountArgs";
import { MissionsFindManyArgs } from "./MissionsFindManyArgs";
import { MissionsFindUniqueArgs } from "./MissionsFindUniqueArgs";
import { CreateMissionsArgs } from "./CreateMissionsArgs";
import { UpdateMissionsArgs } from "./UpdateMissionsArgs";
import { DeleteMissionsArgs } from "./DeleteMissionsArgs";
import { Guild } from "../../guild/base/Guild";
import { MissionsService } from "../missions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Missions)
export class MissionsResolverBase {
  constructor(
    protected readonly service: MissionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Missions",
    action: "read",
    possession: "any",
  })
  async _missionsItemsMeta(
    @graphql.Args() args: MissionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Missions])
  @nestAccessControl.UseRoles({
    resource: "Missions",
    action: "read",
    possession: "any",
  })
  async missionsItems(
    @graphql.Args() args: MissionsFindManyArgs
  ): Promise<Missions[]> {
    return this.service.missionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Missions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Missions",
    action: "read",
    possession: "own",
  })
  async missions(
    @graphql.Args() args: MissionsFindUniqueArgs
  ): Promise<Missions | null> {
    const result = await this.service.missions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Missions)
  @nestAccessControl.UseRoles({
    resource: "Missions",
    action: "create",
    possession: "any",
  })
  async createMissions(
    @graphql.Args() args: CreateMissionsArgs
  ): Promise<Missions> {
    return await this.service.createMissions({
      ...args,
      data: {
        ...args.data,

        guild: args.data.guild
          ? {
              connect: args.data.guild,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Missions)
  @nestAccessControl.UseRoles({
    resource: "Missions",
    action: "update",
    possession: "any",
  })
  async updateMissions(
    @graphql.Args() args: UpdateMissionsArgs
  ): Promise<Missions | null> {
    try {
      return await this.service.updateMissions({
        ...args,
        data: {
          ...args.data,

          guild: args.data.guild
            ? {
                connect: args.data.guild,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Missions)
  @nestAccessControl.UseRoles({
    resource: "Missions",
    action: "delete",
    possession: "any",
  })
  async deleteMissions(
    @graphql.Args() args: DeleteMissionsArgs
  ): Promise<Missions | null> {
    try {
      return await this.service.deleteMissions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Guild, {
    nullable: true,
    name: "guild",
  })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  async getGuild(@graphql.Parent() parent: Missions): Promise<Guild | null> {
    const result = await this.service.getGuild(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
