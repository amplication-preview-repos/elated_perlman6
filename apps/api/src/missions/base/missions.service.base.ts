/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Missions as PrismaMissions,
  Guild as PrismaGuild,
} from "@prisma/client";

export class MissionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MissionsCountArgs, "select">): Promise<number> {
    return this.prisma.missions.count(args);
  }

  async missionsItems(
    args: Prisma.MissionsFindManyArgs
  ): Promise<PrismaMissions[]> {
    return this.prisma.missions.findMany(args);
  }
  async missions(
    args: Prisma.MissionsFindUniqueArgs
  ): Promise<PrismaMissions | null> {
    return this.prisma.missions.findUnique(args);
  }
  async createMissions(
    args: Prisma.MissionsCreateArgs
  ): Promise<PrismaMissions> {
    return this.prisma.missions.create(args);
  }
  async updateMissions(
    args: Prisma.MissionsUpdateArgs
  ): Promise<PrismaMissions> {
    return this.prisma.missions.update(args);
  }
  async deleteMissions(
    args: Prisma.MissionsDeleteArgs
  ): Promise<PrismaMissions> {
    return this.prisma.missions.delete(args);
  }

  async getGuild(parentId: string): Promise<PrismaGuild | null> {
    return this.prisma.missions
      .findUnique({
        where: { id: parentId },
      })
      .guild();
  }
}
