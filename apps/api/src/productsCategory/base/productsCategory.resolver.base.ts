/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductsCategory } from "./ProductsCategory";
import { ProductsCategoryCountArgs } from "./ProductsCategoryCountArgs";
import { ProductsCategoryFindManyArgs } from "./ProductsCategoryFindManyArgs";
import { ProductsCategoryFindUniqueArgs } from "./ProductsCategoryFindUniqueArgs";
import { CreateProductsCategoryArgs } from "./CreateProductsCategoryArgs";
import { UpdateProductsCategoryArgs } from "./UpdateProductsCategoryArgs";
import { DeleteProductsCategoryArgs } from "./DeleteProductsCategoryArgs";
import { ProductsCategoryService } from "../productsCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductsCategory)
export class ProductsCategoryResolverBase {
  constructor(
    protected readonly service: ProductsCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductsCategory",
    action: "read",
    possession: "any",
  })
  async _productsCategoriesMeta(
    @graphql.Args() args: ProductsCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductsCategory])
  @nestAccessControl.UseRoles({
    resource: "ProductsCategory",
    action: "read",
    possession: "any",
  })
  async productsCategories(
    @graphql.Args() args: ProductsCategoryFindManyArgs
  ): Promise<ProductsCategory[]> {
    return this.service.productsCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductsCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductsCategory",
    action: "read",
    possession: "own",
  })
  async productsCategory(
    @graphql.Args() args: ProductsCategoryFindUniqueArgs
  ): Promise<ProductsCategory | null> {
    const result = await this.service.productsCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductsCategory)
  @nestAccessControl.UseRoles({
    resource: "ProductsCategory",
    action: "create",
    possession: "any",
  })
  async createProductsCategory(
    @graphql.Args() args: CreateProductsCategoryArgs
  ): Promise<ProductsCategory> {
    return await this.service.createProductsCategory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductsCategory)
  @nestAccessControl.UseRoles({
    resource: "ProductsCategory",
    action: "update",
    possession: "any",
  })
  async updateProductsCategory(
    @graphql.Args() args: UpdateProductsCategoryArgs
  ): Promise<ProductsCategory | null> {
    try {
      return await this.service.updateProductsCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductsCategory)
  @nestAccessControl.UseRoles({
    resource: "ProductsCategory",
    action: "delete",
    possession: "any",
  })
  async deleteProductsCategory(
    @graphql.Args() args: DeleteProductsCategoryArgs
  ): Promise<ProductsCategory | null> {
    try {
      return await this.service.deleteProductsCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
