/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Guild } from "./Guild";
import { GuildCountArgs } from "./GuildCountArgs";
import { GuildFindManyArgs } from "./GuildFindManyArgs";
import { GuildFindUniqueArgs } from "./GuildFindUniqueArgs";
import { CreateGuildArgs } from "./CreateGuildArgs";
import { UpdateGuildArgs } from "./UpdateGuildArgs";
import { DeleteGuildArgs } from "./DeleteGuildArgs";
import { GuildsPrivateInfoFindManyArgs } from "../../guildsPrivateInfo/base/GuildsPrivateInfoFindManyArgs";
import { GuildsPrivateInfo } from "../../guildsPrivateInfo/base/GuildsPrivateInfo";
import { GuildsMembersFindManyArgs } from "../../guildsMembers/base/GuildsMembersFindManyArgs";
import { GuildsMembers } from "../../guildsMembers/base/GuildsMembers";
import { GuildsJoinInvitationsFindManyArgs } from "../../guildsJoinInvitations/base/GuildsJoinInvitationsFindManyArgs";
import { GuildsJoinInvitations } from "../../guildsJoinInvitations/base/GuildsJoinInvitations";
import { GuildsCoinsFindManyArgs } from "../../guildsCoins/base/GuildsCoinsFindManyArgs";
import { GuildsCoins } from "../../guildsCoins/base/GuildsCoins";
import { Missions } from "../../missions/base/Missions";
import { GuildService } from "../guild.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Guild)
export class GuildResolverBase {
  constructor(
    protected readonly service: GuildService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  async _guildsMeta(
    @graphql.Args() args: GuildCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Guild])
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  async guilds(@graphql.Args() args: GuildFindManyArgs): Promise<Guild[]> {
    return this.service.guilds(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Guild, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "own",
  })
  async guild(
    @graphql.Args() args: GuildFindUniqueArgs
  ): Promise<Guild | null> {
    const result = await this.service.guild(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Guild)
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "create",
    possession: "any",
  })
  async createGuild(@graphql.Args() args: CreateGuildArgs): Promise<Guild> {
    return await this.service.createGuild({
      ...args,
      data: {
        ...args.data,

        missionsItems: args.data.missionsItems
          ? {
              connect: args.data.missionsItems,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Guild)
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async updateGuild(
    @graphql.Args() args: UpdateGuildArgs
  ): Promise<Guild | null> {
    try {
      return await this.service.updateGuild({
        ...args,
        data: {
          ...args.data,

          missionsItems: args.data.missionsItems
            ? {
                connect: args.data.missionsItems,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Guild)
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "delete",
    possession: "any",
  })
  async deleteGuild(
    @graphql.Args() args: DeleteGuildArgs
  ): Promise<Guild | null> {
    try {
      return await this.service.deleteGuild(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GuildsPrivateInfo], {
    name: "guildsPrivateInfos",
  })
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "read",
    possession: "any",
  })
  async findGuildsPrivateInfos(
    @graphql.Parent() parent: Guild,
    @graphql.Args() args: GuildsPrivateInfoFindManyArgs
  ): Promise<GuildsPrivateInfo[]> {
    const results = await this.service.findGuildsPrivateInfos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GuildsMembers], { name: "guildsMembersItems" })
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "read",
    possession: "any",
  })
  async findGuildsMembersItems(
    @graphql.Parent() parent: Guild,
    @graphql.Args() args: GuildsMembersFindManyArgs
  ): Promise<GuildsMembers[]> {
    const results = await this.service.findGuildsMembersItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GuildsJoinInvitations], {
    name: "guildsJoinInvitationsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "read",
    possession: "any",
  })
  async findGuildsJoinInvitationsItems(
    @graphql.Parent() parent: Guild,
    @graphql.Args() args: GuildsJoinInvitationsFindManyArgs
  ): Promise<GuildsJoinInvitations[]> {
    const results = await this.service.findGuildsJoinInvitationsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GuildsCoins], { name: "guildsCoinsItems" })
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "read",
    possession: "any",
  })
  async findGuildsCoinsItems(
    @graphql.Parent() parent: Guild,
    @graphql.Args() args: GuildsCoinsFindManyArgs
  ): Promise<GuildsCoins[]> {
    const results = await this.service.findGuildsCoinsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Missions, {
    nullable: true,
    name: "missionsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "Missions",
    action: "read",
    possession: "any",
  })
  async getMissionsItems(
    @graphql.Parent() parent: Guild
  ): Promise<Missions | null> {
    const result = await this.service.getMissionsItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
