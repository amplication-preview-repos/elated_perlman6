/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GuildService } from "../guild.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GuildCreateInput } from "./GuildCreateInput";
import { Guild } from "./Guild";
import { GuildFindManyArgs } from "./GuildFindManyArgs";
import { GuildWhereUniqueInput } from "./GuildWhereUniqueInput";
import { GuildUpdateInput } from "./GuildUpdateInput";
import { GuildsPrivateInfoFindManyArgs } from "../../guildsPrivateInfo/base/GuildsPrivateInfoFindManyArgs";
import { GuildsPrivateInfo } from "../../guildsPrivateInfo/base/GuildsPrivateInfo";
import { GuildsPrivateInfoWhereUniqueInput } from "../../guildsPrivateInfo/base/GuildsPrivateInfoWhereUniqueInput";
import { GuildsMembersFindManyArgs } from "../../guildsMembers/base/GuildsMembersFindManyArgs";
import { GuildsMembers } from "../../guildsMembers/base/GuildsMembers";
import { GuildsMembersWhereUniqueInput } from "../../guildsMembers/base/GuildsMembersWhereUniqueInput";
import { GuildsJoinInvitationsFindManyArgs } from "../../guildsJoinInvitations/base/GuildsJoinInvitationsFindManyArgs";
import { GuildsJoinInvitations } from "../../guildsJoinInvitations/base/GuildsJoinInvitations";
import { GuildsJoinInvitationsWhereUniqueInput } from "../../guildsJoinInvitations/base/GuildsJoinInvitationsWhereUniqueInput";
import { GuildsCoinsFindManyArgs } from "../../guildsCoins/base/GuildsCoinsFindManyArgs";
import { GuildsCoins } from "../../guildsCoins/base/GuildsCoins";
import { GuildsCoinsWhereUniqueInput } from "../../guildsCoins/base/GuildsCoinsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GuildControllerBase {
  constructor(
    protected readonly service: GuildService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Guild })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GuildCreateInput,
  })
  async createGuild(@common.Body() data: GuildCreateInput): Promise<Guild> {
    return await this.service.createGuild({
      data: {
        ...data,

        missionsItems: data.missionsItems
          ? {
              connect: data.missionsItems,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        slug: true,

        missionsItems: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Guild] })
  @ApiNestedQuery(GuildFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async guilds(@common.Req() request: Request): Promise<Guild[]> {
    const args = plainToClass(GuildFindManyArgs, request.query);
    return this.service.guilds({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        slug: true,

        missionsItems: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Guild })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async guild(
    @common.Param() params: GuildWhereUniqueInput
  ): Promise<Guild | null> {
    const result = await this.service.guild({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        slug: true,

        missionsItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Guild })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GuildUpdateInput,
  })
  async updateGuild(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() data: GuildUpdateInput
  ): Promise<Guild | null> {
    try {
      return await this.service.updateGuild({
        where: params,
        data: {
          ...data,

          missionsItems: data.missionsItems
            ? {
                connect: data.missionsItems,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          slug: true,

          missionsItems: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Guild })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGuild(
    @common.Param() params: GuildWhereUniqueInput
  ): Promise<Guild | null> {
    try {
      return await this.service.deleteGuild({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          slug: true,

          missionsItems: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/guildsPrivateInfos")
  @ApiNestedQuery(GuildsPrivateInfoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "read",
    possession: "any",
  })
  async findGuildsPrivateInfos(
    @common.Req() request: Request,
    @common.Param() params: GuildWhereUniqueInput
  ): Promise<GuildsPrivateInfo[]> {
    const query = plainToClass(GuildsPrivateInfoFindManyArgs, request.query);
    const results = await this.service.findGuildsPrivateInfos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        lastUpdated: true,
        billing_address: true,

        guild: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/guildsPrivateInfos")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async connectGuildsPrivateInfos(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsPrivateInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsPrivateInfos: {
        connect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/guildsPrivateInfos")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async updateGuildsPrivateInfos(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsPrivateInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsPrivateInfos: {
        set: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/guildsPrivateInfos")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async disconnectGuildsPrivateInfos(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsPrivateInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsPrivateInfos: {
        disconnect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/guildsMembersItems")
  @ApiNestedQuery(GuildsMembersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GuildsMembers",
    action: "read",
    possession: "any",
  })
  async findGuildsMembersItems(
    @common.Req() request: Request,
    @common.Param() params: GuildWhereUniqueInput
  ): Promise<GuildsMembers[]> {
    const query = plainToClass(GuildsMembersFindManyArgs, request.query);
    const results = await this.service.findGuildsMembersItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        joinedAt: true,
        role: true,

        guild: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/guildsMembersItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async connectGuildsMembersItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsMembersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsMembersItems: {
        connect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/guildsMembersItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async updateGuildsMembersItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsMembersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsMembersItems: {
        set: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/guildsMembersItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async disconnectGuildsMembersItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsMembersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsMembersItems: {
        disconnect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/guildsJoinInvitationsItems")
  @ApiNestedQuery(GuildsJoinInvitationsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "read",
    possession: "any",
  })
  async findGuildsJoinInvitationsItems(
    @common.Req() request: Request,
    @common.Param() params: GuildWhereUniqueInput
  ): Promise<GuildsJoinInvitations[]> {
    const query = plainToClass(
      GuildsJoinInvitationsFindManyArgs,
      request.query
    );
    const results = await this.service.findGuildsJoinInvitationsItems(
      params.id,
      {
        ...query,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          sentAt: true,
          responseAt: true,
          status: true,

          guild: {
            select: {
              id: true,
            },
          },

          inviterUserId: true,
          inviteeUserEmail: true,
          inviteeUserId: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/guildsJoinInvitationsItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async connectGuildsJoinInvitationsItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsJoinInvitationsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsJoinInvitationsItems: {
        connect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/guildsJoinInvitationsItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async updateGuildsJoinInvitationsItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsJoinInvitationsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsJoinInvitationsItems: {
        set: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/guildsJoinInvitationsItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async disconnectGuildsJoinInvitationsItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsJoinInvitationsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsJoinInvitationsItems: {
        disconnect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/guildsCoinsItems")
  @ApiNestedQuery(GuildsCoinsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GuildsCoins",
    action: "read",
    possession: "any",
  })
  async findGuildsCoinsItems(
    @common.Req() request: Request,
    @common.Param() params: GuildWhereUniqueInput
  ): Promise<GuildsCoins[]> {
    const query = plainToClass(GuildsCoinsFindManyArgs, request.query);
    const results = await this.service.findGuildsCoinsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        coins: true,

        guild: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/guildsCoinsItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async connectGuildsCoinsItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsCoinsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsCoinsItems: {
        connect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/guildsCoinsItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async updateGuildsCoinsItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsCoinsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsCoinsItems: {
        set: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/guildsCoinsItems")
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "update",
    possession: "any",
  })
  async disconnectGuildsCoinsItems(
    @common.Param() params: GuildWhereUniqueInput,
    @common.Body() body: GuildsCoinsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guildsCoinsItems: {
        disconnect: body,
      },
    };
    await this.service.updateGuild({
      where: params,
      data,
      select: { id: true },
    });
  }
}
