/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserRanking } from "./UserRanking";
import { UserRankingCountArgs } from "./UserRankingCountArgs";
import { UserRankingFindManyArgs } from "./UserRankingFindManyArgs";
import { UserRankingFindUniqueArgs } from "./UserRankingFindUniqueArgs";
import { CreateUserRankingArgs } from "./CreateUserRankingArgs";
import { UpdateUserRankingArgs } from "./UpdateUserRankingArgs";
import { DeleteUserRankingArgs } from "./DeleteUserRankingArgs";
import { User } from "../../user/base/User";
import { UserRankingService } from "../userRanking.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserRanking)
export class UserRankingResolverBase {
  constructor(
    protected readonly service: UserRankingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserRanking",
    action: "read",
    possession: "any",
  })
  async _userRankingsMeta(
    @graphql.Args() args: UserRankingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserRanking])
  @nestAccessControl.UseRoles({
    resource: "UserRanking",
    action: "read",
    possession: "any",
  })
  async userRankings(
    @graphql.Args() args: UserRankingFindManyArgs
  ): Promise<UserRanking[]> {
    return this.service.userRankings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserRanking, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserRanking",
    action: "read",
    possession: "own",
  })
  async userRanking(
    @graphql.Args() args: UserRankingFindUniqueArgs
  ): Promise<UserRanking | null> {
    const result = await this.service.userRanking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserRanking)
  @nestAccessControl.UseRoles({
    resource: "UserRanking",
    action: "create",
    possession: "any",
  })
  async createUserRanking(
    @graphql.Args() args: CreateUserRankingArgs
  ): Promise<UserRanking> {
    return await this.service.createUserRanking({
      ...args,
      data: {
        ...args.data,

        user_id: args.data.user_id
          ? {
              connect: args.data.user_id,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserRanking)
  @nestAccessControl.UseRoles({
    resource: "UserRanking",
    action: "update",
    possession: "any",
  })
  async updateUserRanking(
    @graphql.Args() args: UpdateUserRankingArgs
  ): Promise<UserRanking | null> {
    try {
      return await this.service.updateUserRanking({
        ...args,
        data: {
          ...args.data,

          user_id: args.data.user_id
            ? {
                connect: args.data.user_id,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserRanking)
  @nestAccessControl.UseRoles({
    resource: "UserRanking",
    action: "delete",
    possession: "any",
  })
  async deleteUserRanking(
    @graphql.Args() args: DeleteUserRankingArgs
  ): Promise<UserRanking | null> {
    try {
      return await this.service.deleteUserRanking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "userId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUserId(@graphql.Parent() parent: UserRanking): Promise<User | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
