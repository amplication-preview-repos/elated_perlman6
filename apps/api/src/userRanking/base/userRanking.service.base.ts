/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserRanking as PrismaUserRanking,
  User as PrismaUser,
} from "@prisma/client";

export class UserRankingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserRankingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userRanking.count(args);
  }

  async userRankings(
    args: Prisma.UserRankingFindManyArgs
  ): Promise<PrismaUserRanking[]> {
    return this.prisma.userRanking.findMany(args);
  }
  async userRanking(
    args: Prisma.UserRankingFindUniqueArgs
  ): Promise<PrismaUserRanking | null> {
    return this.prisma.userRanking.findUnique(args);
  }
  async createUserRanking(
    args: Prisma.UserRankingCreateArgs
  ): Promise<PrismaUserRanking> {
    return this.prisma.userRanking.create(args);
  }
  async updateUserRanking(
    args: Prisma.UserRankingUpdateArgs
  ): Promise<PrismaUserRanking> {
    return this.prisma.userRanking.update(args);
  }
  async deleteUserRanking(
    args: Prisma.UserRankingDeleteArgs
  ): Promise<PrismaUserRanking> {
    return this.prisma.userRanking.delete(args);
  }

  async getUserId(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userRanking
      .findUnique({
        where: { id: parentId },
      })
      .user_id();
  }
}
