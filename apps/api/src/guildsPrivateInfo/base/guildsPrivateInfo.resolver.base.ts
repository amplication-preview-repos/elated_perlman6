/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GuildsPrivateInfo } from "./GuildsPrivateInfo";
import { GuildsPrivateInfoCountArgs } from "./GuildsPrivateInfoCountArgs";
import { GuildsPrivateInfoFindManyArgs } from "./GuildsPrivateInfoFindManyArgs";
import { GuildsPrivateInfoFindUniqueArgs } from "./GuildsPrivateInfoFindUniqueArgs";
import { CreateGuildsPrivateInfoArgs } from "./CreateGuildsPrivateInfoArgs";
import { UpdateGuildsPrivateInfoArgs } from "./UpdateGuildsPrivateInfoArgs";
import { DeleteGuildsPrivateInfoArgs } from "./DeleteGuildsPrivateInfoArgs";
import { Guild } from "../../guild/base/Guild";
import { GuildsPrivateInfoService } from "../guildsPrivateInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GuildsPrivateInfo)
export class GuildsPrivateInfoResolverBase {
  constructor(
    protected readonly service: GuildsPrivateInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "read",
    possession: "any",
  })
  async _guildsPrivateInfosMeta(
    @graphql.Args() args: GuildsPrivateInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GuildsPrivateInfo])
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "read",
    possession: "any",
  })
  async guildsPrivateInfos(
    @graphql.Args() args: GuildsPrivateInfoFindManyArgs
  ): Promise<GuildsPrivateInfo[]> {
    return this.service.guildsPrivateInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GuildsPrivateInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "read",
    possession: "own",
  })
  async guildsPrivateInfo(
    @graphql.Args() args: GuildsPrivateInfoFindUniqueArgs
  ): Promise<GuildsPrivateInfo | null> {
    const result = await this.service.guildsPrivateInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsPrivateInfo)
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "create",
    possession: "any",
  })
  async createGuildsPrivateInfo(
    @graphql.Args() args: CreateGuildsPrivateInfoArgs
  ): Promise<GuildsPrivateInfo> {
    return await this.service.createGuildsPrivateInfo({
      ...args,
      data: {
        ...args.data,

        guild: args.data.guild
          ? {
              connect: args.data.guild,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsPrivateInfo)
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "update",
    possession: "any",
  })
  async updateGuildsPrivateInfo(
    @graphql.Args() args: UpdateGuildsPrivateInfoArgs
  ): Promise<GuildsPrivateInfo | null> {
    try {
      return await this.service.updateGuildsPrivateInfo({
        ...args,
        data: {
          ...args.data,

          guild: args.data.guild
            ? {
                connect: args.data.guild,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuildsPrivateInfo)
  @nestAccessControl.UseRoles({
    resource: "GuildsPrivateInfo",
    action: "delete",
    possession: "any",
  })
  async deleteGuildsPrivateInfo(
    @graphql.Args() args: DeleteGuildsPrivateInfoArgs
  ): Promise<GuildsPrivateInfo | null> {
    try {
      return await this.service.deleteGuildsPrivateInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Guild, {
    nullable: true,
    name: "guild",
  })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  async getGuild(
    @graphql.Parent() parent: GuildsPrivateInfo
  ): Promise<Guild | null> {
    const result = await this.service.getGuild(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
