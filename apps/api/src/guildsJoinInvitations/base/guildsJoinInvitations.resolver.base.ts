/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GuildsJoinInvitations } from "./GuildsJoinInvitations";
import { GuildsJoinInvitationsCountArgs } from "./GuildsJoinInvitationsCountArgs";
import { GuildsJoinInvitationsFindManyArgs } from "./GuildsJoinInvitationsFindManyArgs";
import { GuildsJoinInvitationsFindUniqueArgs } from "./GuildsJoinInvitationsFindUniqueArgs";
import { CreateGuildsJoinInvitationsArgs } from "./CreateGuildsJoinInvitationsArgs";
import { UpdateGuildsJoinInvitationsArgs } from "./UpdateGuildsJoinInvitationsArgs";
import { DeleteGuildsJoinInvitationsArgs } from "./DeleteGuildsJoinInvitationsArgs";
import { Guild } from "../../guild/base/Guild";
import { GuildsJoinInvitationsService } from "../guildsJoinInvitations.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GuildsJoinInvitations)
export class GuildsJoinInvitationsResolverBase {
  constructor(
    protected readonly service: GuildsJoinInvitationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "read",
    possession: "any",
  })
  async _guildsJoinInvitationsItemsMeta(
    @graphql.Args() args: GuildsJoinInvitationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GuildsJoinInvitations])
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "read",
    possession: "any",
  })
  async guildsJoinInvitationsItems(
    @graphql.Args() args: GuildsJoinInvitationsFindManyArgs
  ): Promise<GuildsJoinInvitations[]> {
    return this.service.guildsJoinInvitationsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GuildsJoinInvitations, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "read",
    possession: "own",
  })
  async guildsJoinInvitations(
    @graphql.Args() args: GuildsJoinInvitationsFindUniqueArgs
  ): Promise<GuildsJoinInvitations | null> {
    const result = await this.service.guildsJoinInvitations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsJoinInvitations)
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "create",
    possession: "any",
  })
  async createGuildsJoinInvitations(
    @graphql.Args() args: CreateGuildsJoinInvitationsArgs
  ): Promise<GuildsJoinInvitations> {
    return await this.service.createGuildsJoinInvitations({
      ...args,
      data: {
        ...args.data,

        guild: args.data.guild
          ? {
              connect: args.data.guild,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuildsJoinInvitations)
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "update",
    possession: "any",
  })
  async updateGuildsJoinInvitations(
    @graphql.Args() args: UpdateGuildsJoinInvitationsArgs
  ): Promise<GuildsJoinInvitations | null> {
    try {
      return await this.service.updateGuildsJoinInvitations({
        ...args,
        data: {
          ...args.data,

          guild: args.data.guild
            ? {
                connect: args.data.guild,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuildsJoinInvitations)
  @nestAccessControl.UseRoles({
    resource: "GuildsJoinInvitations",
    action: "delete",
    possession: "any",
  })
  async deleteGuildsJoinInvitations(
    @graphql.Args() args: DeleteGuildsJoinInvitationsArgs
  ): Promise<GuildsJoinInvitations | null> {
    try {
      return await this.service.deleteGuildsJoinInvitations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Guild, {
    nullable: true,
    name: "guild",
  })
  @nestAccessControl.UseRoles({
    resource: "Guild",
    action: "read",
    possession: "any",
  })
  async getGuild(
    @graphql.Parent() parent: GuildsJoinInvitations
  ): Promise<Guild | null> {
    const result = await this.service.getGuild(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
