/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserGodson } from "./UserGodson";
import { UserGodsonCountArgs } from "./UserGodsonCountArgs";
import { UserGodsonFindManyArgs } from "./UserGodsonFindManyArgs";
import { UserGodsonFindUniqueArgs } from "./UserGodsonFindUniqueArgs";
import { CreateUserGodsonArgs } from "./CreateUserGodsonArgs";
import { UpdateUserGodsonArgs } from "./UpdateUserGodsonArgs";
import { DeleteUserGodsonArgs } from "./DeleteUserGodsonArgs";
import { UserGodsonService } from "../userGodson.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserGodson)
export class UserGodsonResolverBase {
  constructor(
    protected readonly service: UserGodsonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserGodson",
    action: "read",
    possession: "any",
  })
  async _userGodsonsMeta(
    @graphql.Args() args: UserGodsonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserGodson])
  @nestAccessControl.UseRoles({
    resource: "UserGodson",
    action: "read",
    possession: "any",
  })
  async userGodsons(
    @graphql.Args() args: UserGodsonFindManyArgs
  ): Promise<UserGodson[]> {
    return this.service.userGodsons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserGodson, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserGodson",
    action: "read",
    possession: "own",
  })
  async userGodson(
    @graphql.Args() args: UserGodsonFindUniqueArgs
  ): Promise<UserGodson | null> {
    const result = await this.service.userGodson(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserGodson)
  @nestAccessControl.UseRoles({
    resource: "UserGodson",
    action: "create",
    possession: "any",
  })
  async createUserGodson(
    @graphql.Args() args: CreateUserGodsonArgs
  ): Promise<UserGodson> {
    return await this.service.createUserGodson({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserGodson)
  @nestAccessControl.UseRoles({
    resource: "UserGodson",
    action: "update",
    possession: "any",
  })
  async updateUserGodson(
    @graphql.Args() args: UpdateUserGodsonArgs
  ): Promise<UserGodson | null> {
    try {
      return await this.service.updateUserGodson({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserGodson)
  @nestAccessControl.UseRoles({
    resource: "UserGodson",
    action: "delete",
    possession: "any",
  })
  async deleteUserGodson(
    @graphql.Args() args: DeleteUserGodsonArgs
  ): Promise<UserGodson | null> {
    try {
      return await this.service.deleteUserGodson(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
