/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TransactionsHonorGlory } from "./TransactionsHonorGlory";
import { TransactionsHonorGloryCountArgs } from "./TransactionsHonorGloryCountArgs";
import { TransactionsHonorGloryFindManyArgs } from "./TransactionsHonorGloryFindManyArgs";
import { TransactionsHonorGloryFindUniqueArgs } from "./TransactionsHonorGloryFindUniqueArgs";
import { CreateTransactionsHonorGloryArgs } from "./CreateTransactionsHonorGloryArgs";
import { UpdateTransactionsHonorGloryArgs } from "./UpdateTransactionsHonorGloryArgs";
import { DeleteTransactionsHonorGloryArgs } from "./DeleteTransactionsHonorGloryArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { TransactionsHonorGloryService } from "../transactionsHonorGlory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TransactionsHonorGlory)
export class TransactionsHonorGloryResolverBase {
  constructor(
    protected readonly service: TransactionsHonorGloryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TransactionsHonorGlory",
    action: "read",
    possession: "any",
  })
  async _transactionsHonorGloriesMeta(
    @graphql.Args() args: TransactionsHonorGloryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TransactionsHonorGlory])
  @nestAccessControl.UseRoles({
    resource: "TransactionsHonorGlory",
    action: "read",
    possession: "any",
  })
  async transactionsHonorGlories(
    @graphql.Args() args: TransactionsHonorGloryFindManyArgs
  ): Promise<TransactionsHonorGlory[]> {
    return this.service.transactionsHonorGlories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TransactionsHonorGlory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TransactionsHonorGlory",
    action: "read",
    possession: "own",
  })
  async transactionsHonorGlory(
    @graphql.Args() args: TransactionsHonorGloryFindUniqueArgs
  ): Promise<TransactionsHonorGlory | null> {
    const result = await this.service.transactionsHonorGlory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionsHonorGlory)
  @nestAccessControl.UseRoles({
    resource: "TransactionsHonorGlory",
    action: "create",
    possession: "any",
  })
  async createTransactionsHonorGlory(
    @graphql.Args() args: CreateTransactionsHonorGloryArgs
  ): Promise<TransactionsHonorGlory> {
    return await this.service.createTransactionsHonorGlory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionsHonorGlory)
  @nestAccessControl.UseRoles({
    resource: "TransactionsHonorGlory",
    action: "update",
    possession: "any",
  })
  async updateTransactionsHonorGlory(
    @graphql.Args() args: UpdateTransactionsHonorGloryArgs
  ): Promise<TransactionsHonorGlory | null> {
    try {
      return await this.service.updateTransactionsHonorGlory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransactionsHonorGlory)
  @nestAccessControl.UseRoles({
    resource: "TransactionsHonorGlory",
    action: "delete",
    possession: "any",
  })
  async deleteTransactionsHonorGlory(
    @graphql.Args() args: DeleteTransactionsHonorGloryArgs
  ): Promise<TransactionsHonorGlory | null> {
    try {
      return await this.service.deleteTransactionsHonorGlory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "senderUser" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findSenderUser(
    @graphql.Parent() parent: TransactionsHonorGlory,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findSenderUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
